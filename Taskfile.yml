version: '3'

includes:
  common: 
    taskfile: ./packages/mono-dev/task/common.yaml
    flatten: true
    optional: true

  server:         {taskfile: ./packages/server,           dir: ./packages/server,           internal: true}
  app:            {taskfile: ./packages/app,              dir: ./packages/app,              internal: true}
  blueflame:      {taskfile: ./packages/blueflame,        dir: ./packages/blueflame,        internal: true}
  blueflame-deps: {taskfile: ./packages/blueflame-deps,   dir: ./packages/blueflame-deps,   internal: true}
  blueflame-proc-macros: {taskfile: ./packages/blueflame-proc-macros, dir: ./packages/blueflame-proc-macros, internal: true}
  runtime:        {taskfile: ./packages/runtime,          dir: ./packages/runtime,          internal: true}
  runtime-tests:  {taskfile: ./packages/runtime-tests,    dir: ./packages/runtime-tests,    internal: true}
  runtime-wasm:   {taskfile: ./packages/runtime-wasm,     dir: ./packages/runtime-wasm,     internal: true}
  runtime-worker: {taskfile: ./packages/runtime-worker,   dir: ./packages/runtime-worker,   internal: true}
  parser:         {taskfile: ./packages/parser,           dir: ./packages/parser,           internal: true}
  parser-legacy:  {taskfile: ./packages/parser-legacy,    dir: ./packages/parser-legacy,    internal: true}
  item-system:    {taskfile: ./packages/item-system,      dir: ./packages/item-system,      internal: true}
  skybook-api:    {taskfile: ./packages/skybook-api,      dir: ./packages/skybook-api,      internal: true}
  research:       {taskfile: ./packages/research-scripts, dir: ./packages/research-scripts, internal: true}
  localization:   {taskfile: ./packages/localization,     dir: ./packages/localization,     internal: true}
  item-assets:    {taskfile: ./packages/item-assets,      dir: ./packages/item-assets,      internal: true}
  manual:         {taskfile: ./packages/manual,           dir: ./packages/manual,           internal: true}
  intwc:          {taskfile: ./packages/intwc,            dir: ./packages/intwc,            internal: true}
  shared-controls: {taskfile: ./packages/shared-controls, dir: ./packages/shared-controls,  internal: true}

tasks:
  install-cargo-extra-tools:
    aliases: [icets]
    cmds:
      - task: cargo-binstall
        vars:
          PACKAGES: mdbook mdbook-admonish live-server cargo-watch wasm-pack ripgrep layered-crate
      - task: cargo-binstall
        vars:
          PACKAGES: workex --git https://github.com/Pistonite/workex
      # only needed for regenerating app icons
      # - cargo install --git https://github.com/Pistonite/prism

  install:
    desc: Install packages for local development
    aliases: [i]
    cmds:
      - echo "nightly" > rust-toolchain
      - magoo install
      - pnpm install
      - task: post-install

  install-ci:
    cmds:
      - task: pull-artifacts
      - pnpm install --frozen-lockfile
      - task: post-install

  post-install:
    cmds:
      - task: parser-legacy:install
      - task: manual:install
      - task: intwc:install
      - task: item-assets:install
      - task: shared-controls:install
      - task: server:install

  build-artifacts:
    desc: Generate artifacts for development locally and from hosted app
    cmds:
      - task: parser:pull-artifacts-public
      - task: item-assets:pull-artifacts-public
      - task: research:build
      - task: localization:build
      - task: item-assets:build-src
      - task: item-system:build
      - task: runtime-wasm:pull-dist
      - task: blueflame-deps:build

  pull-artifacts:
    desc: Pull artifacts from storage (requires gcloud access)
    deps:
      - localization:pull-artifacts
      - item-assets:pull-artifacts
      - item-system:pull-artifacts
      - parser:pull-artifacts
      - blueflame-deps:pull-artifacts

  check-ci:
    deps:
      - localization:pull-artifacts
      - item-assets:pull-artifacts-ts
      - item-system:pull-artifacts-ts
      - parser:pull-artifacts
      - blueflame-deps:pull-artifacts
      - runtime-tests:pull-artifacts
    cmds:
      - pnpm install --frozen-lockfile
      - task: post-install
      - task: check

  check:
    desc: Run ALL of the checks
    cmds:
      - task: check-layer-1
      - task: check-layer-2
      - task: check-layer-3
      - cmd: echo 'All checks passed!'
        silent: true

  check-layer-1:
    deps:
      - skybook-api:check

  check-layer-2:
    deps:
      - manual:check
      - localization:check
      - item-system:check
      - app:check
      - server:check
      - runtime-worker:check

  check-layer-3:
    cmds:
      - task: parser:check
      - task: blueflame-proc-macros:check
      - task: blueflame-deps:check
      - task: blueflame:check
      - task: runtime:check
      - task: runtime-tests:check
      - task: runtime-wasm:check

  test-ci:
    deps:
      - localization:pull-artifacts
      - item-assets:pull-artifacts-ts
      - item-system:pull-artifacts-ts
      - parser:pull-artifacts
      - blueflame-deps:pull-artifacts
      - runtime-tests:pull-artifacts
    cmds:
      - pnpm install --frozen-lockfile
      - task: post-install
      - task: test
      

  test:
    desc: Run ALL of the tests
    cmds:
      - task: test-layer-1
      - task: test-layer-2
      - cmd: echo 'All tests passed!'
        silent: true

  test-layer-2:
    cmds:
      - task: parser:test
      - task: blueflame-deps:test
      - task: blueflame:test
      - task: runtime-tests:run-mini

  test-layer-1:
    deps:
      - item-system:test
      - skybook-api:test


  build:
    desc: Check that components can build without failure
    deps:
      - app:build
      - server:build
    cmds:
      - task: manual:build
      - task: runtime-wasm:build

  build-manual-ci:
    deps:
      - parser:pull-artifacts
      - item-assets:pull-artifacts-ts
    cmds:
        # this technically isn't needed, but not installing pnpm
        # causes CI to be unreliable due to cache issues
        # (and I couldn't figure out how to optinally enable the setup)
      - pnpm install --frozen-lockfile 
      - task: manual:install
      - task: manual:build

  build-app-ci:
    deps:
      - localization:pull-artifacts
        # large item assets are cached in CI to speed up builds
        # here we just pull the TS artifacts
      - item-assets:pull-artifacts-ts
      - item-system:pull-artifacts
    cmds:
      - pnpm install --frozen-lockfile
      - task: parser-legacy:install
      - task: intwc:install
      - task: app:build

  build-runtime-ci-pr:
    deps:
      - parser:pull-artifacts
      - blueflame-deps:pull-artifacts
      - runtime-tests:pull-artifacts
    cmds:
      - pnpm install --frozen-lockfile
      - task: runtime-wasm:build
      - task: runtime-wasm:clean-dist # so we don't upload non-min bundles
      - task: runtime-wasm:build-dist-min

  build-runtime-ci:
    deps:
      - parser:pull-artifacts
      - blueflame-deps:pull-artifacts
      - runtime-tests:pull-artifacts
    cmds:
      - pnpm install --frozen-lockfile
      - task: runtime-wasm:build-wasm
      - task: runtime-wasm:build-dist-min

  build-server-ci:
    cmds:
      - pnpm install --frozen-lockfile
      - task: parser-legacy:install
      - task: server:install
      - task: server:build

  clean:
    desc: Clean the whole repo for temporaries that might help resolve build issues
    cmds:
      - rm -f rustc-ice-*
      - cargo clean
      - rustup update
      - task: runtime-wasm:clean

  publish:
    desc: Publish artifacts
    vars:
      SKYBOOK_VERSION_TAG:
        sh: echo "v"$(jq '.version' package.json | tr -d '"')
    cmds:
      - cmd: git tag -d {{.SKYBOOK_VERSION_TAG}}
        ignore_error: true
      - cmd: git push origin {{.SKYBOOK_VERSION_TAG}} --delete
        ignore_error: true
      - git tag {{.SKYBOOK_VERSION_TAG}}
      - git push origin {{.SKYBOOK_VERSION_TAG}}
      # TODO: publish skybook-api
