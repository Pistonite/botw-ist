/**
 * This file is generated by workex
 */
import type { RuntimeApp } from "../RuntimeApp.ts";

import { type WorkexPromise, WorkexClient, type WorkexClientOptions } from "@pistonite/workex";
import type { ItemSearchResult } from ".././types.ts";

/**
 * API provided by the simulator app that the runtime needs to call
 * 
 * @workex:send runtime
 * @workex:recv app
 */
export class RuntimeAppClient implements RuntimeApp {
    private client: WorkexClient<"skyb-api-0.0.1">

    constructor(options: WorkexClientOptions) {
        this.client = new WorkexClient("skyb-api-0.0.1", options);
    }

    /**
     * Get the custom BlueFlame image provided by the user.
     * 
     * The runtime may request this if it's instructed to initialize
     * with a custom image. For the best user experience, the app should
     * prompt file selection and have the image ready before initializing,
     * and return the file in this callback.
     * 
     * If the user did not provide a custom image, the app should return undefined,
     * in which case the runtime initialization will fail.
     */
    public getCustomBlueFlameImage( ): WorkexPromise<Uint8Array | undefined> {
        return this.client.post<Uint8Array | undefined>(28 /* RuntimeApp.getCustomBlueFlameImage */, [ ]);
    }

    /**
     * The app will be notified whenever a simulation run completes.
     * Note if multiple runs are queued, this will only be called for the
     * last one.
     */
    public onRunCompleted( ): WorkexPromise<void> {
        return this.client.postVoid(29 /* RuntimeApp.onRunCompleted */, [ ]);
    }

    /**
     * Resolve a quoted item search query to a single item, or
     * return undefined if the item cannot be resolved due to error
     * or no match.
     */
    public resolveQuotedItem( query: string ): WorkexPromise<ItemSearchResult | undefined> {
        return this.client.post<ItemSearchResult | undefined>(30 /* RuntimeApp.resolveQuotedItem */, [ query ]);
    }

    /**
     * Terminate the client and the underlying worker
     *
     * This method is generated by workex
     */
    public terminate() {
        this.client.terminate();
    }

    /**
     * Get the protocol identifier used by the underlying workex communication
     *
     * This method is generated by workex
     */
    public protocol(): "skyb-api-0.0.1" {
        return "skyb-api-0.0.1";
    }

    /**
     * Create a client-only handshake
     *
     * Generally, handshakes should be created using the `bindHost` function on each side.
     * However, if one side is a client-only side, this method can be used to bind a stub host
     * to establish the handshake.
     *
     * This method is generated by workex
     */
    public handshake() {
        return this.client.handshake();
    }
}