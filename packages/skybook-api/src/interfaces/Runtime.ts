/*
 * This file is generated by the workex CLI Tool
 *
 * Please visit https://workex.pistonite.dev for more information
 */

import type { Runtime } from "../Runtime.ts";

import type { WxPromise, WxBusRecvHandler, WxProtocolBoundSender } from "@pistonite/workex";
import type { Result } from "@pistonite/pure/result";
import type { ParserErrorReport } from "../parser";
import type { InventoryListView } from "../runtime";
import type { ItemSearchResult, RuntimeInitArgs, RuntimeInitError, RuntimeInitOutput } from "../types.ts";

/*
 * These generated implementations are used internally by other generated code.
 * They should not be used directly!
 */

/**
 * API provided by the simulator runtime, called by the application.
 */
export class _wxSenderImpl implements Runtime {
    private sender: WxProtocolBoundSender

    constructor(sender: WxProtocolBoundSender) {
        this.sender = sender
    }

    /**
     * Start executing the script in the background
     */
    public executeScript( script: string ): WxPromise<void> {
        return this.sender.sendVoid(24 /* Runtime.executeScript */, [ script ]);
    }

    /**
     * Execute the script if not up-to-date, and return the inventory list view
     * at the byte offset `pos` in the script.
     */
    public getInventoryListView( script: string, pos: number ): WxPromise<InventoryListView> {
        return this.sender.send<InventoryListView>(25 /* Runtime.getInventoryListView */, [ script, pos ]);
    }

    /**
     * Parse the script and get diagnostics from the parser.
     * 
     * Note that the span in the errors are byte offsets, not character offsets.
     */
    public getParserDiagnostics( script: string ): WxPromise<ParserErrorReport[]> {
        return this.sender.send<ParserErrorReport[]>(26 /* Runtime.getParserDiagnostics */, [ script ]);
    }

    /**
     * Parse the script and get semantic tokens in the range from the parser.
     * 
     * The output is triples of [start, length, tokenType]
     * 
     * The offsets in both inputs and outputs should be byte offsets, not character offsets.
     */
    public getSemanticTokens( script: string, start: number, end: number ): WxPromise<Uint32Array> {
        return this.sender.send<Uint32Array>(27 /* Runtime.getSemanticTokens */, [ script, start, end ]);
    }

    /**
     * Initialize the runtime with the given arguments.
     */
    public initialize( args: RuntimeInitArgs ): WxPromise<Result<RuntimeInitOutput, RuntimeInitError>> {
        return this.sender.send<Result<RuntimeInitOutput, RuntimeInitError>>(28 /* Runtime.initialize */, [ args ]);
    }

    /**
     * Resolve an item identifier search query to a list of items, ordered by score (best first).
     * Returns an empty list if no items are found.
     */
    public resolveItemIdent( query: string ): WxPromise<ItemSearchResult[]> {
        return this.sender.send<ItemSearchResult[]>(29 /* Runtime.resolveItemIdent */, [ query ]);
    }
}

/**
 * API provided by the simulator runtime, called by the application.
 */
export const _wxRecverImpl = (handler: Runtime): WxBusRecvHandler => {
    return ((fId, args: any[]) => { switch (fId) {
        case 24 /* Runtime.executeScript */: {
            const [ a0 ] = args;
            return handler.executeScript( a0 );
        }
        case 25 /* Runtime.getInventoryListView */: {
            const [ a0, a1 ] = args;
            return handler.getInventoryListView( a0, a1 );
        }
        case 26 /* Runtime.getParserDiagnostics */: {
            const [ a0 ] = args;
            return handler.getParserDiagnostics( a0 );
        }
        case 27 /* Runtime.getSemanticTokens */: {
            const [ a0, a1, a2 ] = args;
            return handler.getSemanticTokens( a0, a1, a2 );
        }
        case 28 /* Runtime.initialize */: {
            const [ a0 ] = args;
            return handler.initialize( a0 );
        }
        case 29 /* Runtime.resolveItemIdent */: {
            const [ a0 ] = args;
            return handler.resolveItemIdent( a0 );
        }
    } return Promise.resolve({ err: { code: "UnknownFunction" } }); }) as WxBusRecvHandler;
};