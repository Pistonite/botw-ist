/*
 * This file is generated by the workex CLI Tool
 *
 * Please visit https://workex.pistonite.dev for more information
 */

import type { Extension } from "../extension_api.ts";

import type { WxPromise, WxBusRecvHandler, WxProtocolBoundSender } from "@pistonite/workex";

/*
 * These generated implementations are used internally by other generated code.
 * They should not be used directly!
 */

/**
 * API implemented by the extension and called by the application.
 */
export class _wxSenderImpl implements Extension {
    private sender: WxProtocolBoundSender

    constructor(sender: WxProtocolBoundSender) {
        this.sender = sender
    }

    /**
     * Notify the extension that the dark mode preference has changed.
     * 
     * The extension can update the theme based on this event
     */
    public onDarkModeChanged( dark: boolean ): WxPromise<void> {
        return this.sender.sendVoid(16 /* Extension.onDarkModeChanged */, [ dark ]);
    }

    /**
     * Notify the extension that the icon rendering preference has changed
     */
    public onIconSettingsChanged( enableHighQualityIcons: boolean, enableAnimations: boolean ): WxPromise<void> {
        return this.sender.sendVoid(17 /* Extension.onIconSettingsChanged */, [ enableHighQualityIcons, enableAnimations ]);
    }

    /**
     * Notify the extension that the locale perference has changed.
     * 
     * The locale string is one of the supported locales by the application,
     * such as `en-US`, `fr-FR`, etc.
     * 
     * The extension can update the UI strings based on this event.
     */
    public onLocaleChanged( locale: string ): WxPromise<void> {
        return this.sender.sendVoid(18 /* Extension.onLocaleChanged */, [ locale ]);
    }

    /**
     * Notify the extension that the script has changed.
     */
    public onScriptChanged( script: string, charPos: number ): WxPromise<void> {
        return this.sender.sendVoid(19 /* Extension.onScriptChanged */, [ script, charPos ]);
    }
}

/**
 * API implemented by the extension and called by the application.
 */
export const _wxRecverImpl = (handler: Extension): WxBusRecvHandler => {
    return ((fId, args: any[]) => { switch (fId) {
        case 16 /* Extension.onDarkModeChanged */: {
            const [ a0 ] = args;
            return handler.onDarkModeChanged( a0 );
        }
        case 17 /* Extension.onIconSettingsChanged */: {
            const [ a0, a1 ] = args;
            return handler.onIconSettingsChanged( a0, a1 );
        }
        case 18 /* Extension.onLocaleChanged */: {
            const [ a0 ] = args;
            return handler.onLocaleChanged( a0 );
        }
        case 19 /* Extension.onScriptChanged */: {
            const [ a0, a1 ] = args;
            return handler.onScriptChanged( a0, a1 );
        }
    } return Promise.resolve({ err: { code: "UnknownFunction" } }); }) as WxBusRecvHandler;
};