import os
import yaml
import multiprocessing
import json

ignore_name = set([
    # Not Items (don't have icon anyway)
    "Korok",
    "Traveler",
    "???",
    "Remote Bomb",
    "Remote Bomb +",
    "Monument Shard",
    "Finley",
    "Great Fairy Fountain",

    # Manually duplicated
    "Thunder Helm",

    # Two distinct items with same name
    "Light Arrows",
])

manual_name = {
    "Weapon_Sword_071": "Master Sword",
    "Weapon_Sword_072": "Master Sword",
}

def main():
    home = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    actor_dir = os.path.join(home, "data", "Actor")
    actor_files = [ os.path.join(actor_dir, x) for x in os.listdir(actor_dir)]

    name_to_actor_and_icon = {}

    print("processing actors...")
    # process each actor
    with multiprocessing.Pool() as pool:
        for result in pool.imap_unordered(process_actor, actor_files):
            if not result:
                continue

            name, actor_name, icon_actor_name = result
            if name in name_to_actor_and_icon:
                data = name_to_actor_and_icon[name]
                data["actors"].append(actor_name)
                data["icons"].add(icon_actor_name)
            else:
                data = {
                    "actors": [actor_name],
                    "icons": set([icon_actor_name]),
                }
                name_to_actor_and_icon[name] = data

    print("resolving actor icons...")

    manual_resolution = {
        "Snow Boots": "Armor_141_Lower",
        "Master Sword": "Weapon_Sword_070",
        "Sheikah Slate": "Obj_DRStone_Get",
    }

    # actor name -> icon actor name, if not the same
    resolution = {}

    for name in name_to_actor_and_icon:
        data = name_to_actor_and_icon[name]
        actors = data["actors"]
        # if only one actor has this name, skip
        if len(actors) <= 1:
            continue
        icons = data["icons"]
        if len(icons) > 1:
            # more than one icon, needs manual resolution
            if name not in manual_resolution:
                print(f"actors: {actors}")
                print(f"icons: {icons}")
                raise Exception(f"Manual resolution needed for {name}")
            icon = manual_resolution[name]
            if icon not in icons:
                raise Exception(f"In manual resolution for {name}: Icon {icon} not in {icons}")
            for actor in actors:
                if actor != icon:
                    print(f"{actor} -> {icon}")
                    resolution[actor] = icon
        else:
            icon = next(iter(icons))
            # only one icon, resolve to it
            for actor in actors:
                if actor != icon:
                    print(f"{actor} -> {icon}")
                    resolution[actor] = icon

    print("saving resolution output...")
    output_path = os.path.join(os.path.dirname(home), "item-sprites", "src", "ActorRemap.gen.ts")
    save_typescript(output_path, resolution)

def process_actor(actor_path) -> tuple[str, str, str] | None:
    """
        Return (localized_name, actor_name, icon_actor_name)
        Return None if actor doesn't have translation
    """
    with open(actor_path, "r", encoding="utf-8") as f:
        actor = yaml.safe_load(f)
    actor_name = actor["actor"]

    # load the localized name
    if actor_name in manual_name:
        name = manual_name[actor_name]
    else:
        if not actor["localization"]:
            return None
        strings = actor["localization"]["en-US"]
        if not strings["name"]:
            return None
        name = strings["name"]["text"]
        if name in ignore_name:
            return None

    # find the icon actor from gparam
    icon_actor = actor_name
    if actor["gparamlist"]:
        if "itemUseIconActorName" in actor["gparamlist"]:
            icon_actor = actor["gparamlist"]["itemUseIconActorName"]

    return (name, actor_name, icon_actor)


def save_typescript(path, resolution):

    content = """
/**
 * This file is generated by resolve-icon-actor.py
 * DO NOT EDIT MANUALLY
 */

/** Actor name -> icon actor name, if different */
export type ActorRemap = Record<string, string>;
    """

    with open(path, "w", encoding="utf-8", newline="\n") as f:
        f.write(content)
        f.write("\n")
        f.write("export const ActorRemap: ActorRemap = JSON.parse(`")
        json.dump(resolution, f, separators=(',', ':')) # minify
        f.write("`);\n")

if __name__ == "__main__":
    main()

