import { ActorDataMap } from "../../item-system/src/generated/ActorDataMap.ts"
import { getActorParam, getItemTypeAndUse, PouchItemType, PouchItemUse } from "../../item-system/src/data"

console.log("Generate PHF Map for actors");

const DEFAULT_TYPE = PouchItemType.Material;
const DEFAULT_USE = PouchItemUse.Item;

const typeMap = {};
const useMap = {};
const canStackActors = new Set<string>();
const cannotSellActors = new Set<string>();
const lifeMap = {};

for (const actor in ActorDataMap) {
    const [type, use] = getItemTypeAndUse(actor);
    if (type !== DEFAULT_TYPE) {
        typeMap[actor] = type;
    }
    if (use !== DEFAULT_USE) {
        useMap[actor] = use;
    }
    const canStack = getActorParam(actor, "canStack");
    if (canStack) {
        canStackActors.add(actor);
    }
    const cannotSell = getActorParam(actor, "cannotSell");
    if (cannotSell) {
        cannotSellActors.add(actor);
    }
    const profile = getActorParam(actor, "profile");
    if (profile.startsWith("Weapon")) {
        const life = getActorParam(actor, "generalLife");
        lifeMap[actor] = life;
    }
}

console.log(Object.keys(typeMap).length, "actors found with non-default type");
console.log(Object.keys(useMap).length, "actors found with non-default use");
console.log(canStackActors.size, "stackable actors found");
console.log(cannotSellActors.size, "non-sellable actors found");
console.log(Object.keys(lifeMap).length, "weapon actor life values found");

const lines  = [
"//! This file is auto-generated by scripts/gen-actors.ts",
"//! DO NOT EDIT MANUALLY",
];
lines.push("#[rustfmt::skip]");
lines.push("pub static ACTOR_TYPE_MAP: phf::Map<&'static str, i32> = phf::phf_map! {");
for (const actor in typeMap) {
    lines.push(`    "${actor}" => ${typeMap[actor]},`);
}
lines.push("};");
lines.push("#[rustfmt::skip]");
lines.push("pub static ACTOR_USE_MAP: phf::Map<&'static str, i32> = phf::phf_map! {");
for (const actor in useMap) {
    lines.push(`    "${actor}" => ${useMap[actor]},`);
}
lines.push("};");

lines.push("#[rustfmt::skip]");
lines.push("pub static STACKABLE_ACTORS_SORTED: &[&str] = &[");
const canStackActorsSorted = [...canStackActors];
canStackActorsSorted.sort();
for (const actor of canStackActorsSorted) {
    lines.push(`    "${actor}",`);
}
lines.push("];")

lines.push("#[rustfmt::skip]");
lines.push("pub static NON_SELLABLE_ACTORS_SORTED: &[&str] = &[");
const cannotSellActorsSorted = [...cannotSellActors];
cannotSellActorsSorted.sort();
for (const actor of cannotSellActorsSorted) {
    lines.push(`    "${actor}",`);
}
lines.push("];")

lines.push("#[rustfmt::skip]");
lines.push("pub static WEAPON_LIFE_MAP: phf::Map<&'static str, i32> = phf::phf_map! {");
for (const actor in lifeMap) {
    lines.push(`    "${actor}" => ${lifeMap[actor]},`);
}
lines.push("};");

Bun.file("src/generated/actor.rs").write(lines.join("\n"))

