import os
import yaml
SELF_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
RESEARCH_SCRIPTS_DIR = os.path.join(os.path.dirname(SELF_DIR), "research-scripts")
if not os.path.exists(RESEARCH_SCRIPTS_DIR):
    raise Exception(f"botw-research-scripts not found: {RESEARCH_SCRIPTS_DIR}")

HEADER = """
//! This file is auto-generated by scripts/generate.py
//! DO NOT EDIT MANUALLY
"""

def main():
    generate_armor_upgrade()
    generate_item_name()

def generate_armor_upgrade():
    armor_upgrade_path = os.path.join(RESEARCH_SCRIPTS_DIR, "output", "armor-upgrades.yaml")
    with open(armor_upgrade_path, "r", encoding="utf-8") as f:
        armor_upgrade = yaml.safe_load(f)
    
    output_path = os.path.join(SELF_DIR, "src", "generated", "armor_upgrade.rs")

    with open(output_path, "w", encoding="utf-8", newline="\n") as f:
        f.write(HEADER)
        f.write("""
/// Armor upgrade data, each slice is from 0 star to 4 star
pub static ARMOR_UPGRADE: &[[&str; 5]] = &[
""")
        f.write("\n")
        for group in armor_upgrade:
            f.write("    [")
            f.write(", ".join([f'"{x}"' for x in group]))
            f.write("],\n")
        f.write("];\n")

def generate_item_name():
    input_path = os.path.join(SELF_DIR, "data", "item-search-terms.yaml")
    with open(input_path, "r", encoding="utf-8") as f:
        item_names = yaml.safe_load(f)

    def parse_item_key(key):
        if "@" in key:
            key, tags = key.split("@")
            tags = tags.split(",")
        else:
            tags = []
        if ":" in key:
            word, short = key.split(":")
        else:
            word = key
            short = ""
        is_material = "material" in tags
        id_len = len(word)
        item_name = word + short
        return (item_name, id_len, is_material)

    output_path = os.path.join(SELF_DIR, "src", "generated", "item_name.rs")

    ids_by_search = []

    with open(output_path, "w", encoding="utf-8", newline="\n") as f:
        f.write(HEADER)
        f.write("use crate::search::SearchName;\n")
        f.write("pub static ITEM_NAMES: &[SearchName] = &[\n")
        for item_key in sorted(item_names):
            actor_name = item_names[item_key]
            (item_name, id_len, is_material) = parse_item_key(item_key)
            ids_by_search.append(item_name[:id_len])
            f.write(f"SearchName::new(\"{item_name}\", \"{actor_name}\", {"true" if is_material else "false"}, {id_len}),\n")

        f.write("];\n")

    # verify search string and ids have the same sort order
    ids = list(sorted(ids_by_search))
    if ids != ids_by_search:
        print("Search string and ids have different sort order")
        exit(1)

if __name__ == "__main__":
    main()

import yaml
import os
