/**
 * This file is generated by workex
 */
import type { RuntimeAppHost } from "../RuntimeAppHost.ts";

import type { Result } from "@pistonite/pure/result";
import { type WorkexPromise, WorkexClient, type WorkexClientOptions } from "@pistonite/workex";

/**
 * API provided by the simulator app that the runtime needs to call
 * 
 * @workex:send runtime
 * @workex:recv app
 */
export class RuntimeAppHostClient implements RuntimeAppHost {
    private client: WorkexClient<"runtime">

    constructor(options: WorkexClientOptions) {
        this.client = new WorkexClient("runtime", options);
    }

    /**
     * Resolve a quoted item search query to a single item, or else
     * return a localized error message
     * 
     * cook effect is the game's representation, or 0 for no effect
     */
    public resolveQuotedItem( query: string ): WorkexPromise<Result<{ actor: string; cookEffect: number }, string>> {
        return this.client.post<Result<{ actor: string; cookEffect: number }, string>>(23 /* RuntimeAppHost.resolveQuotedItem */, [ query ]);
    }

    /**
     * Terminate the client and the underlying worker
     *
     * This method is generated by workex
     */
    public terminate() {
        this.client.terminate();
    }

    /**
     * Get the protocol identifier used by the underlying workex communication
     *
     * This method is generated by workex
     */
    public protocol(): "runtime" {
        return "runtime";
    }

    /**
     * Create a client-only handshake
     *
     * Generally, handshakes should be created using the `bindHost` function on each side.
     * However, if one side is a client-only side, this method can be used to bind a stub host
     * to establish the handshake.
     *
     * This method is generated by workex
     */
    public handshake() {
        return this.client.handshake();
    }
}