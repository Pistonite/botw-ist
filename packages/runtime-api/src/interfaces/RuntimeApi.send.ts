/**
 * This file is generated by workex
 */
import type { RuntimeApi } from "../protocol.ts";

import { WorkexPromise, WorkexClient, type WorkexClientOptions } from "@pistonite/workex";

/**
 * API provided by the simulator runtime
 * 
 * @workex:send app
 * @workex:recv runtime
 */
export class RuntimeApiClient implements RuntimeApi {
    private client: WorkexClient<"runtime">

    constructor(options: WorkexClientOptions) {
        this.client = new WorkexClient("runtime", options);
    }

    /**
     * Set the script for the runtime, which starts executing
     * the script immediately
     */
    public setScript( script: string ): WorkexPromise<string> {
        return this.client.post<string>(16 /* RuntimeApi.setScript */, [ script ]);
    }

    /**
     * Terminate the client and the underlying worker
     *
     * This method is generated by workex
     */
    public terminate() {
        this.client.terminate();
    }

    /**
     * Get the protocol identifier used by the underlying workex communication
     *
     * This method is generated by workex
     */
    public protocol(): "runtime" {
        return "runtime";
    }

    /**
     * Create a client-only handshake
     *
     * Generally, handshakes should be created using the `bindHost` function on each side.
     * However, if one side is a client-only side, this method can be used to bind a stub host
     * to establish the handshake.
     *
     * This method is generated by workex
     */
    public handshake() {
        return this.client.handshake();
    }
}