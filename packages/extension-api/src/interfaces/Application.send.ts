/**
 * This file is generated by workex
 */
import type { Application } from "../protocol.ts";

import type { Result } from "@pistonite/pure/result";
import { type WorkexPromise, WorkexClient, type WorkexClientOptions } from "@pistonite/workex";

/**
 * API implemented by the application and called by the extension.
 * 
 * @workex:send ext
 * @workex:recv app
 */
export class ApplicationClient implements Application {
    private client: WorkexClient<"skyb-0.0.1">

    constructor(options: WorkexClientOptions) {
        this.client = new WorkexClient("skyb-0.0.1", options);
    }

    /**
     * Get the current simulator script.
     */
    public getScript( ): WorkexPromise<string> {
        return this.client.post<string>(16 /* Application.getScript */, [ ]);
    }

    /**
     * Resolve an item from a query
     * 
     * If localized is true, treat the query as a localized item search query (i.e. "[tag:]words"),
     * otherwise, treat it as an identifier search query.
     */
    public resolveItem( query: string, localized: boolean, limit: number ): WorkexPromise<Result<{ actor: string, cookEffect: number}[], string>> {
        return this.client.post<Result<{ actor: string, cookEffect: number}[], string>>(17 /* Application.resolveItem */, [ query, localized, limit ]);
    }

    /**
     * Set the simulator script.
     */
    public setScript( script: string ): WorkexPromise<void> {
        return this.client.postVoid(18 /* Application.setScript */, [ script ]);
    }

    /**
     * Terminate the client and the underlying worker
     *
     * This method is generated by workex
     */
    public terminate() {
        this.client.terminate();
    }

    /**
     * Get the protocol identifier used by the underlying workex communication
     *
     * This method is generated by workex
     */
    public protocol(): "skyb-0.0.1" {
        return "skyb-0.0.1";
    }

    /**
     * Create a client-only handshake
     *
     * Generally, handshakes should be created using the `bindHost` function on each side.
     * However, if one side is a client-only side, this method can be used to bind a stub host
     * to establish the handshake.
     *
     * This method is generated by workex
     */
    public handshake() {
        return this.client.handshake();
    }
}