/**
 * This file is generated by workex
 */
import type { Extension } from "../protocol.ts";

import type { Result } from "@pistonite/pure/result";
import { type WorkexPromise, WorkexClient, type WorkexClientOptions } from "@pistonite/workex";

/**
 * API implemented by the extension and called by the application.
 * 
 * @workex:send app
 * @workex:recv ext
 */
export class ExtensionClient implements Extension {
    private client: WorkexClient<"skyb-0.0.1">

    constructor(options: WorkexClientOptions) {
        this.client = new WorkexClient("skyb-0.0.1", options);
    }

    /**
     * Notify the extension that the dark mode preference has changed.
     * 
     * The extension can update the theme based on this event
     */
    public onDarkModeChanged( dark: boolean ): WorkexPromise<void> {
        return this.client.postVoid(19 /* Extension.onDarkModeChanged */, [ dark ]);
    }

    /**
     * Notify the extension that the locale perference has changed.
     * 
     * The locale string is one of the supported locales by the application,
     * such as `en-US`, `fr-FR`, etc.
     * 
     * The extension can update the UI strings based on this event.
     */
    public onLocaleChanged( locale: string ): WorkexPromise<void> {
        return this.client.postVoid(20 /* Extension.onLocaleChanged */, [ locale ]);
    }

    /**
     * Notify the extension that the script has changed.
     */
    public onScriptChanged( script: string ): WorkexPromise<void> {
        return this.client.postVoid(21 /* Extension.onScriptChanged */, [ script ]);
    }

    /**
     * Terminate the client and the underlying worker
     *
     * This method is generated by workex
     */
    public terminate() {
        this.client.terminate();
    }

    /**
     * Get the protocol identifier used by the underlying workex communication
     *
     * This method is generated by workex
     */
    public protocol(): "skyb-0.0.1" {
        return "skyb-0.0.1";
    }

    /**
     * Create a client-only handshake
     *
     * Generally, handshakes should be created using the `bindHost` function on each side.
     * However, if one side is a client-only side, this method can be used to bind a stub host
     * to establish the handshake.
     *
     * This method is generated by workex
     */
    public handshake() {
        return this.client.handshake();
    }
}